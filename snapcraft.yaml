# Copyright (C) 2021 Canonical Ltd.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: firefox
version: "116.0a1"
summary: Mozilla Firefox web browser
description:  Firefox is a powerful, extensible web browser with support for modern web application technologies.
confinement: strict
grade: stable
base: core20
compression: lzo

assumes:
  - snapd2.54 # for mount-control

apps:
  firefox:
    command: firefox.launcher
    desktop: firefox.desktop
    extensions: [gnome-3-38]
    environment:
      DICPATH: "$SNAP_COMMON/snap-hunspell"
      GTK_USE_PORTAL: 1
      HOME: "$SNAP_USER_COMMON"
      PIPEWIRE_CONFIG_NAME: "$SNAP/usr/share/pipewire/pipewire.conf"
      PIPEWIRE_MODULE_DIR: "$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/pipewire-0.3"
      SPA_PLUGIN_DIR: "$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/spa-0.2"
      SPEECHD_ADDRESS: "unix_socket:/run/user/$SNAP_UID/speech-dispatcher/speechd.sock"
    slots:
      - dbus-daemon
      - mpris
    plugs:
      - audio-playback
      - audio-record
      - avahi-observe
      - browser-sandbox
      - camera
      - cups-control
      - gsettings
      - hardware-observe
      - home
      - host-hunspell
      - joystick
      - network
      - network-observe
      - opengl
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
  geckodriver:
    command: usr/lib/firefox/geckodriver
    extensions: [gnome-3-38]
    plugs:
      - network-bind
      # + all the plugs required by firefox, so that when geckodriver
      # executes firefox it inherits the correct set of permissions
      - audio-playback
      - audio-record
      - avahi-observe
      - browser-sandbox
      - camera
      - cups-control
      - gsettings
      - hardware-observe
      - home
      - host-hunspell
      - joystick
      - network
      - network-observe
      - opengl
      - removable-media
      - screen-inhibit-control
      - system-packages-doc
      - u2f-devices
      - unity7
      - upower-observe
    slots:
      - dbus-daemon
      - mpris

plugs:
  browser-sandbox:
    interface: browser-support
    allow-sandbox: true
  dot-mozilla-firefox:
    interface: personal-files
    read: [$HOME/.mozilla/firefox]
  etc-firefox:
    interface: system-files
    read: [/etc/firefox]
  host-hunspell:
    interface: mount-control
    mount:
    - what: /usr/share/hunspell
      where: $SNAP_COMMON/host-hunspell
      persistent: true
      options: [ro, bind, noatime, noexec]

layout:
  /usr/share/libdrm:
    bind: $SNAP/gnome-platform/usr/share/libdrm

parts:
  rust:
    plugin: nil
    build-packages:
      - wget
    override-pull: wget -O rustup.sh https://sh.rustup.rs
    override-build: |
      REQUIRED_RUST_VERSION=1.66.0
      sh rustup.sh -q -y --default-toolchain $REQUIRED_RUST_VERSION
    override-prime: ''

  cbindgen:
    plugin: nil
    after:
      - rust
    override-build: $HOME/.cargo/bin/cargo install cbindgen
    override-prime: ''

  clang:
    plugin: nil
    build-packages:
      - libtinfo5
      - wget
    build-environment:
      - LLVM_RELEASE: "14.0.0"
    override-pull: |
      ROOT=https://github.com/llvm/llvm-project/releases/download/llvmorg-$LLVM_RELEASE/clang+llvm-$LLVM_RELEASE-
      if [ $SNAPCRAFT_TARGET_ARCH = "amd64" ]; then
        SUFFIX=x86_64-linux-gnu-ubuntu-18.04.tar.xz
      elif [ $SNAPCRAFT_TARGET_ARCH = "armhf" ]; then
        SUFFIX=armv7a-linux-gnueabihf.tar.xz
      elif [ $SNAPCRAFT_TARGET_ARCH = "arm64" ]; then
        SUFFIX=aarch64-linux-gnu.tar.xz
      fi
      mkdir -p $SNAPCRAFT_STAGE/usr
      cd $SNAPCRAFT_STAGE/usr
      wget -O - $ROOT$SUFFIX | tar -x --xz --strip-components=1
    override-prime: ''

  dump-syms:
    plugin: nil
    after:
      - rust
    build-packages:
      - curl
      - git
      - python3-yaml
    override-pull: |
      ROOT=https://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central
      REVISION=$(wget -O - $ROOT/firefox-$SNAPCRAFT_PROJECT_VERSION.en-US.linux-x86_64.txt | tail -1 | sed -n "s#^.*\/rev/\(.*\)\$#\1#p")
      FETCHES=https://hg.mozilla.org/mozilla-central/raw-file/${REVISION}/taskcluster/ci/fetch/toolchains.yml
      TOOLCHAINS=$(curl -sSL "${FETCHES}")
      REPO=$(echo "${TOOLCHAINS}" | python3 -c 'import yaml, sys; fetches = yaml.safe_load(sys.stdin); print("{}".format(fetches["dump-syms"]["fetch"]["repo"]))')
      SHA1=$(echo "${TOOLCHAINS}" | python3 -c 'import yaml, sys; fetches = yaml.safe_load(sys.stdin); print("{}".format(fetches["dump-syms"]["fetch"]["revision"]))')
      git clone "${REPO}" . && git checkout "${SHA1}"
    override-build: |
      $HOME/.cargo/bin/cargo build --release
      cp target/release/dump_syms $SNAPCRAFT_STAGE/usr/bin/

  # This is a temporary workaround to including the hunspell content
  # snap, which would cause breakage in the Ubuntu desktop image build
  # because of the Ubuntu policy.  See:
  # https://bugzilla.mozilla.org/show_bug.cgi?id=1792006
  #
  # The definition of this part is essentially a copy of the
  # corresponding part in hunspell-dictionaries-1-7-2004 by
  # Buo-ren, Lin.
  hunspell:
    plugin: nil
    override-build: |
      set -eu
      apt download $(apt-cache search '^hunspell-.*$' |
        awk '!/myspell|dbgsym|tools|transitional|dependency/{printf "%s ", $1}')
      find . -name "*.deb" -exec dpkg-deb -x {} "$SNAPCRAFT_PART_INSTALL" \;
    filesets:
      hunspell-dictionaries: [usr/share/hunspell]
    stage:
      - $hunspell-dictionaries
    prime:
      - $hunspell-dictionaries

  # We use the amd64 binary for all architectures since the used files are said
  # to be arch-independent.
  wasi-sdk:
    plugin: nil
    after:
      - clang
    build-packages:
      - wget
    build-environment:
      - WASI_BRANCH: "15"
      - WASI_RELEASE: "15.0"
    override-pull: |
      ROOT=https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-$WASI_BRANCH
      wget $ROOT/wasi-sysroot-$WASI_RELEASE.tar.gz
      wget $ROOT/libclang_rt.builtins-wasm32-wasi-$WASI_RELEASE.tar.gz
    override-build: |
      tar -C $SNAPCRAFT_STAGE -xf wasi-sysroot-$WASI_RELEASE.tar.gz
      tar -C $SNAPCRAFT_STAGE/usr/lib/clang/* -xf libclang_rt.builtins-wasm32-wasi-$WASI_RELEASE.tar.gz
    override-prime: ''

  nodejs:
    plugin: nil
    build-packages:
      - wget
    build-environment:
      - NODEJS_RELEASE: "v18.12.1"
    override-pull: |
      ROOT=https://nodejs.org/dist/$NODEJS_RELEASE/node-$NODEJS_RELEASE-linux-
      if [ $SNAPCRAFT_TARGET_ARCH = "amd64" ]; then
        SUFFIX=x64.tar.xz
      elif [ $SNAPCRAFT_TARGET_ARCH = "armhf" ]; then
        SUFFIX=armv7l.tar.xz
      elif [ $SNAPCRAFT_TARGET_ARCH = "arm64" ]; then
        SUFFIX=arm64.tar.xz
      fi
      wget -O - $ROOT$SUFFIX | tar -x --xz
    override-build: |
      cp -R node-$NODEJS_RELEASE-linux-*/ $SNAPCRAFT_PART_INSTALL/usr/
    override-prime: ''

  mozconfig:
    plugin: nil
    override-stage: |
      cp $SNAPCRAFT_PROJECT_DIR/mozconfig.in $SNAPCRAFT_STAGE/mozconfig
    override-prime: ''

  # Launchpad builders have a timeout for how long they are allowed to access
  # the internet (through a proxy) starting from the start of the build.
  # Since the firefox part takes a long time to build, we need to ensure
  # that all other parts that need to access the internet (to e.g. fetch build
  # or stage packages) are built before it (before the proxy authentication is
  # revoked).
  firefox:
    plugin: nil
    after:
      - apikeys
      - cbindgen
      - clang
      - distribution
      - dump-syms
      - ffmpeg
      - firefox-langpacks
      - hunspell
      - mozconfig
      - nodejs
      - pipewire
      - rust
      - wasi-sdk
    build-packages:
      - cmake
      - coreutils
      - file
      - git
      - libasound2-dev
      - libdbus-glib-1-dev
      - libgtk2.0-dev
      - libpython3-dev
      - libx11-xcb-dev
      - libxt-dev
      - m4
      - make
      - mercurial
      - nasm
      - quilt
      - sed
      - unzip
      - wget
      - zip
    override-pull: |
      REPO=https://hg.mozilla.org/mozilla-central
      ROOT=https://ftp.mozilla.org/pub/firefox/nightly/latest-mozilla-central
      REVISION=$(wget -O - $ROOT/firefox-$SNAPCRAFT_PROJECT_VERSION.en-US.linux-x86_64.txt | tail -1 | sed -n "s#^$REPO/rev/\(.*\)\$#\1#p")
      hg clone $REPO -u $REVISION .
      rm -rf .hg
      mkdir -p $SNAPCRAFT_STAGE/debug-symbols/
      cp toolkit/crashreporter/tools/upload_symbols.py $SNAPCRAFT_STAGE/debug-symbols/
    override-build: |
      rm -rf $SNAPCRAFT_PART_SRC/*
      export PATH=$HOME/.cargo/bin:$PATH
      QUILT_PATCHES=$SNAPCRAFT_PROJECT_DIR/patches quilt push -a
      # GitHub Actions is limited to 2 CPUs, 7GB RAM and too much debug infos
      # from Rust will make gkrust linkage step fail. Same holds for arm64
      # builds on Launchpad.
      # It seems we can't detect $GITHUB_WORKSPACE so we assume presence of the
      # file "symbols-upload-token" means we are running on GitHub
      if [ -f "$SNAPCRAFT_PROJECT_DIR/symbols-upload-token" -o $SNAPCRAFT_TARGET_ARCH = "arm64" ]; then
        patch -p1 < $SNAPCRAFT_PROJECT_DIR/patches/mozilla-reduce-rust-debuginfo.patch
      fi
      export MOZCONFIG="$SNAPCRAFT_STAGE/mozconfig"
      if [ $SNAPCRAFT_TARGET_ARCH != "armhf" ]; then
        echo "ac_add_options --enable-rust-simd" >> $MOZCONFIG
      fi
      GNOME_SDK_SNAP=/snap/gnome-3-38-2004-sdk/current
      export LDFLAGS="-Wl,-rpath-link=$GNOME_SDK_SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET -Wl,-rpath-link=$GNOME_SDK_SNAP/usr/lib"
      export WASI_SYSROOT=$SNAPCRAFT_STAGE/wasi-sysroot
      export MOZBUILD_STATE_PATH=$SNAPCRAFT_PART_BUILD/.mozbuild
      MACH="env -u LD_LIBRARY_PATH -u PYTHONPATH /usr/bin/python3 ./mach"
      $MACH configure --prefix=$SNAPCRAFT_PART_INSTALL/usr
      $MACH build -j$SNAPCRAFT_PARALLEL_BUILD_COUNT
      find . -name 'dep-graph.bin' -delete
      find . -name 'query-cache.bin' -delete
      find . -name 'work-products.bin' -delete
      DUMP_SYMS=$SNAPCRAFT_STAGE/usr/bin/dump_syms $MACH buildsymbols
      $MACH install
      cp obj-*/dist/bin/geckodriver $SNAPCRAFT_PART_INSTALL/usr/lib/firefox/
      DISTRIBUTION=$SNAPCRAFT_PART_INSTALL/usr/lib/firefox/distribution
      mkdir -p $DISTRIBUTION/extensions
      cp taskcluster/docker/firefox-snap/firefox.desktop $SNAPCRAFT_PART_INSTALL/
      cp browser/branding/nightly/default256.png $SNAPCRAFT_PART_INSTALL/
      sed -i 's/\(^Icon=\).*$/\1\/default256.png/' $SNAPCRAFT_PART_INSTALL/firefox.desktop
      cp obj-*/dist/firefox-*.crashreporter-symbols.zip $SNAPCRAFT_STAGE/debug-symbols/
    stage-packages:
      - libcurl4
      - libpci3
      - libspeechd2
      - libxt6
    prime:
      - default256.png
      - firefox.desktop
      - usr/lib/firefox
      - usr/lib/*/libasn1.so.*
      - usr/lib/*/libcurl.so.*
      - usr/lib/*/libgssapi.so.*
      - usr/lib/*/libhcrypto.so.*
      - usr/lib/*/libheimbase.so.*
      - usr/lib/*/libheimntlm.so.*
      - usr/lib/*/libhogweed.so.*
      - usr/lib/*/libhx509.so.*
      - usr/lib/*/libkrb5.so.*
      - usr/lib/*/liblber-2.4.so.*
      - usr/lib/*/libldap_r-2.4.so.*
      - usr/lib/*/libnettle.so.*
      - usr/lib/*/libnghttp2.so.*
      - usr/lib/*/libpci.so.*
      - usr/lib/*/libroken.so.*
      - usr/lib/*/librtmp.so.*
      - usr/lib/*/libsasl2.so.*
      - usr/lib/*/libspeechd.so.*
      - usr/lib/*/libssh.so.*
      - usr/lib/*/libssl.so.*
      - usr/lib/*/libwind.so.*
      - usr/lib/*/libXt.so.*

  firefox-langpacks:
    plugin: nil
    build-packages:
      - sed
      - wget
    override-pull: |
      SERVER=https://ftp.mozilla.org
      ROOT=$SERVER/pub/firefox/nightly/latest-mozilla-central-l10n/linux-x86_64/xpi/
      XPIS=$(wget -O - $ROOT | sed -n "s/.* href=\"\(.*$SNAPCRAFT_PROJECT_VERSION.*\.xpi\)\".*/\1/p")
      for XPI in $XPIS; do
        wget $SERVER$XPI
      done
    override-prime: |
      INSTALLDIR=$SNAPCRAFT_PRIME/usr/lib/firefox/distribution/extensions
      mkdir -p $INSTALLDIR
      for XPI in $(ls $SNAPCRAFT_PART_SRC/*.xpi); do
        LANGCODE=$(basename $XPI .langpack.xpi | sed -r 's/.*\.(.*)/\1/')
        cp $XPI $INSTALLDIR/langpack-$LANGCODE@firefox.mozilla.org.xpi
      done

  launcher:
    plugin: nil
    override-prime: |
      cp "$SNAPCRAFT_PROJECT_DIR/firefox.launcher" "$SNAPCRAFT_PRIME/"
      cp "$SNAPCRAFT_PROJECT_DIR/patch-default-profile.py" "$SNAPCRAFT_PRIME/"

  distribution:
    plugin: nil
    source: https://github.com/mozilla-partners/canonical.git
    override-prime: |
      mkdir -p $SNAPCRAFT_PRIME/usr/lib/firefox
      cp -R $SNAPCRAFT_PART_SRC/desktop/ubuntu/distribution $SNAPCRAFT_PRIME/usr/lib/firefox/

  ffmpeg:
    plugin: nil
    # Not using the ffmpeg snap (which might provide a more recent version)
    # because it is currently built on core18
    stage-packages:
      - libavcodec58
    prime:
      - usr/lib/*/libaom.so.*
      - usr/lib/*/libavcodec.so.*
      - usr/lib/*/libavutil.so.*
      - usr/lib/*/libcodec2.so.*
      - usr/lib/*/libdav1d.so.*
      - usr/lib/*/libgsm.so.*
      - usr/lib/*/libmd.so.*
      - usr/lib/*/libmfx.so.*
      - usr/lib/*/libmp3lame.so.*
      - usr/lib/*/libnuma.so.*
      - usr/lib/*/libOpenCL.so.*
      - usr/lib/*/libopus.so.*
      - usr/lib/*/libshine.so.*
      - usr/lib/*/libsnappy.so.*
      - usr/lib/*/libsoxr.so.*
      - usr/lib/*/libspeex.so.*
      - usr/lib/*/libswresample.so.*
      - usr/lib/*/libtheoradec.so.*
      - usr/lib/*/libtheoraenc.so.*
      - usr/lib/*/libtwolame.so.*
      - usr/lib/*/libva-drm.so.*
      - usr/lib/*/libva.so.*
      - usr/lib/*/libva-x11.so.*
      - usr/lib/*/libvdpau.so.*
      - usr/lib/*/libvpx.so.*
      - usr/lib/*/libwavpack.so.*
      - usr/lib/*/libwebpmux.so.*
      - usr/lib/*/libwebp.so.*
      - usr/lib/*/libx264.so.*
      - usr/lib/*/libx265.so.*
      - usr/lib/*/libxvidcore.so.*
      - usr/lib/*/libzvbi.so.*

  pipewire:
    source: https://gitlab.freedesktop.org/pipewire/pipewire/-/archive/0.3.32/pipewire-0.3.32.tar.gz
    plugin: meson
    meson-parameters:
      - --prefix=/usr
      - --buildtype=release
      - --strip
      - -Dalsa=disabled
      - -Dpipewire-alsa=disabled
      - -Djack=disabled
      - -Dpipewire-jack=disabled
      - -Dsession-managers=[]
    prime:
      - usr/lib/*/pipewire-*
      - usr/lib/*/spa-*
      - usr/lib/*/libpipewire*.so*
      - usr/share/pipewire

  apikeys:
    plugin: nil
    after:
      - mozconfig
    build-packages:
      - coreutils
      - gpg
      - jq
    override-build: |
      MOZCONFIG="$SNAPCRAFT_STAGE/mozconfig"
      gpg -d --batch --passphrase "$(base64 -d $SNAPCRAFT_PROJECT_DIR/.passphrase)" -o apikeys $SNAPCRAFT_PROJECT_DIR/.apikeys
      cat apikeys | jq .MOZ_GOOGLE_LOCATION_SERVICE_API_KEY | tr -d '"' > $SNAPCRAFT_PART_INSTALL/gls-gapi.data
      echo "ac_add_options --with-google-location-service-api-keyfile=$SNAPCRAFT_STAGE/gls-gapi.data" >> $MOZCONFIG
      cat apikeys | jq .MOZ_GOOGLE_SAFEBROWSING_API_KEY | tr -d '"' > $SNAPCRAFT_PART_INSTALL/sb-gapi.data
      echo "ac_add_options --with-google-safebrowsing-api-keyfile=$SNAPCRAFT_STAGE/sb-gapi.data" >> $MOZCONFIG
      cat apikeys | jq .MOZ_MOZILLA_API_KEY | tr -d '"' > $SNAPCRAFT_PART_INSTALL/mozilla-desktop-geoloc-api.key
      echo "ac_add_options --with-mozilla-api-keyfile=$SNAPCRAFT_STAGE/mozilla-desktop-geoloc-api.key" >> $MOZCONFIG
    override-prime: ''

  debug-symbols:
    plugin: nil
    build-packages:
      - python3
      - python3-virtualenv
    after:
      - firefox
    override-pull: |
      export SYMBOLS_ARCHIVE=$(find $SNAPCRAFT_STAGE/debug-symbols/ -type f -name "firefox-*.crashreporter-symbols.zip")
      if [ -f "$SNAPCRAFT_PROJECT_DIR/symbols-upload-token" ]; then
        virtualenv venv/
        source venv/bin/activate
        venv/bin/pip3 install redo requests argparse
        SOCORRO_SYMBOL_UPLOAD_URL=https://symbols.mozilla.org/upload/ SOCORRO_SYMBOL_UPLOAD_TOKEN_FILE="$SNAPCRAFT_PROJECT_DIR/symbols-upload-token" venv/bin/python3 $SNAPCRAFT_STAGE/debug-symbols/upload_symbols.py $SYMBOLS_ARCHIVE
        rm "$SNAPCRAFT_PROJECT_DIR/symbols-upload-token"
        deactivate
      else
        cp $SYMBOLS_ARCHIVE $SNAPCRAFT_PROJECT_DIR/$SNAPCRAFT_PROJECT_NAME_$SNAPCRAFT_PROJECT_VERSION_$SNAP_ARCH.debug
      fi

slots:
  dbus-daemon:
    interface: dbus
    bus: session
    name: org.mozilla.firefox_nightly

diff --git a/dom/media/webrtc/third_party_build/gn-configs/fixup_json.py b/dom/media/webrtc/third_party_build/gn-configs/fixup_json.py
--- a/dom/media/webrtc/third_party_build/gn-configs/fixup_json.py
+++ b/dom/media/webrtc/third_party_build/gn-configs/fixup_json.py
@@ -19,16 +19,10 @@
         sys.exit(1)
 
     f = open(filein, "r")
     file = f.read()
 
-    # Remove references to CR_XCODE_VERSION and the output directory of the gn process.
-    # This change does not cause a change in the generated moz.build files.
-    file = re.sub(r' *"CR_XCODE_VERSION=([0-9.]+)",\n', r"", file)
-    file = re.sub(r' *"CR_SYSROOT_HASH=[0-9a-f]+",\n', r"", file)
-    file = re.sub(r',\n *"(.\:)?/.*/third_party/libwebrtc/gn-output/gen/"', r"", file)
-
     # In practice, almost all of the entries in the cflags section have no affect
     # on the moz.build output files when running ./mach build-backend -b GnMozbuildWriter
     # There are few exceptions which do: -msse2, -mavx2, -mfma, -fobjc-arc
     # However, since we're really concerned about removing differences between development
     # machines, we only need remove the reference to osx sdk.  Removing it doesn't change
diff --git a/python/mozbuild/mozbuild/gn_processor.py b/python/mozbuild/mozbuild/gn_processor.py
--- a/python/mozbuild/mozbuild/gn_processor.py
+++ b/python/mozbuild/mozbuild/gn_processor.py
@@ -4,10 +4,11 @@
 
 from __future__ import absolute_import, print_function, unicode_literals
 
 from collections import defaultdict, deque
 from copy import deepcopy
+from pathlib import Path
 import glob
 import json
 import os
 import six
 import subprocess
@@ -150,11 +151,12 @@
             if dep not in all_deps:
                 queue.append(dep)
     return all_deps
 
 
-def filter_gn_config(gn_result, sandbox_vars, input_vars, gn_target):
+def filter_gn_config(path, gn_result, sandbox_vars, input_vars, gn_target):
+    gen_path = (Path(path) / "gen").resolve()
     # Translates the raw output of gn into just what we'll need to generate a
     # mozbuild configuration.
     gn_out = {"targets": {}, "sandbox_vars": sandbox_vars, "gn_gen_args": input_vars}
 
     cpus = {
@@ -197,11 +199,20 @@
             "cflags",
             "deps",
             "libs",
         ):
             spec[spec_attr] = raw_spec.get(spec_attr, [])
-            gn_out["targets"][target_fullname] = spec
+            if spec_attr == "defines":
+                spec[spec_attr] = [
+                    d
+                    for d in spec[spec_attr]
+                    if "CR_XCODE_VERSION" not in d and "CR_SYSROOT_HASH" not in d
+                ]
+            if spec_attr == "include_dirs":
+                spec[spec_attr] = [d for d in spec[spec_attr] if gen_path != Path(d)]
+
+        gn_out["targets"][target_fullname] = spec
 
     return gn_out
 
 
 def process_gn_config(
@@ -626,11 +637,11 @@
     gn_config_file = mozpath.join(out_dir, "project.json")
 
     with open(gn_config_file, "r") as fh:
         gn_out = json.load(fh)
         gn_out = filter_gn_config(
-            gn_out, sandbox_variables, input_variables, gn_target
+            out_dir, gn_out, sandbox_variables, input_variables, gn_target
         )
 
     os.remove(gn_config_file)
 
     gn_out_file = mozpath.join(out_dir, gn_arg_string + ".json")

